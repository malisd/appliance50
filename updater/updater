#!/bin/bash
#
# This is CS50 update!
#
# To run, execute "update50" at the command line.
#

URL=http://docs.danallan.net/cs50
ARCHIVE=appliance50.zip
DOWNLOAD=/tmp

export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin

eche() { echo "$@" >&2; }

#### Preparation ####

#echo -n "Preparing.. "
# prepare to update desktop
# http://forum.xfce.org/viewtopic.php?id=5775
#killall xfconfd >&2 || {
#  echo WARNING
#  echo Unable to prepare updating the desktop.
#  eche killall failure!
#}

#echo Done!

#### Fetch files ####
echo -n "Downloading files.. "

curl -s -S -o $DOWNLOAD/$ARCHIVE $URL/$ARCHIVE >&2 || {
  echo ERROR
  echo " Cannot execute update50. Do you have an Internet connection?"
  eche CURL failure!
  exit 1
}

echo Done!

#### Unzip files ####

echo -n "Installing files.. "
unzip -uo $DOWNLOAD/$ARCHIVE -d / >&2 || {
  echo ERROR
  echo " Cannot execute update50. Decompression error."
  eche Unzip failure!
  exit 1
}

echo Done!

# remove archive
rm $DOWNLOAD/$ARCHIVE

#### Install packages ####

echo -n "Preparing to install packages.. "

yum clean all >&2

echo Done!

echo -n "Installing packages.. "
yum -y install \
cpid alsa-plugins-pulseaudio at-spi2-atk bc binutils bind-utils cgdb   \
check50 clang coreutils cs50-2012-fall ctags dconf-editor xarchiver    \
xfce4-icon-theme xfce4-mixer dejavu-fonts-common dejavu-sans-fonts     \
dejavu-sans-mono-fonts dejavu-serif-fonts diffutils dkms emacs evince  \
freenx-server garcon glibc-debuginfo gcc gdb gdm gconf-editor gedit    \
gedit-plugins generic-logos generic-release git glib2                  \
gnome-icon-theme-extras gnome-icon-theme-legacy                        \
gnome-icon-theme-symbolic gnome-menus gnome-packagekit                 \
google-chrome-stable httpd icedtea-web indent iptables java java-devel \
kernel kernel-devel kernel-headers library50-c library50-php lynx make \
man man-pages mlocate mod_suphp mysql mysql-server nano                \
nautilus-dropbox ncftp npm nss-softokn-debuginfo ntp orca              \
openssh-clients openssh-server parole patch php php-devel php-mysql    \
php-pear php-pecl-xdebug php-PHPMailer php-phpunit-DbUnit              \
php-phpunit-PHPUnit php-tidy php-xml phpMyAdmin pulseaudio python      \
pyxdg render50 ristretto rpm rsnapshot rsync ruby rubygems samba       \
samba-client screen sed setup shadow-utils style50 submit50 sudo       \
system-config-firewall-base system-config-firewall                     \
system-config-keyboard system-config-language system-config-network    \
system-config-services teamviewer7 telnet tidy traceroute tree         \
valgrind vim vim-X11 wget words xfce4-genmon-plugin                    \
xfce4-screenshooter xorg-x11-fonts-misc xterm yum-plugin-fastestmirror \
yum-plugin-priorities yum-plugin-protectbase yum-utils                 \
>&2 || {
  echo WARNING
  echo " Not all packages may have been installed."
  eche yum install failure!
}

yum -y groupinstall xfce-desktop >&2 || {
  echo WARNING
  echo " Unable to groupinstall xfce-desktop."
}

echo Done!

#### Remove packages ####

echo -n "Removing unnecessary packages.. "

yum -y remove \
brt audit dnsmasq leafpad libpcap ModemManager NetworkManager         \
NetworkManager-gnome openssh-askpass orage ppp setroubleshoot-server  \
wpa_supplicant xfce4-power-manager xscreensaver-base                  \
>&2 || {
  echo WARNING
  echo " Not all packages may have been removed."
}

echo Done!

#### Disable services ####

echo -n "Disabling unnecessary services.. "

declare -a off=(netconsole)
for service in "${off[@]}"
do
    eche Disabled $service.
    chkconfig $service off >&2
done
declare -a off=(avahi-daemon ip6tables mdmonitor saslauthd sendmail)
for service in "${off[@]}"
do
    eche Disabled $service.
    systemctl disable $service.service >&2
done

echo Done!

#### Enable services ####

echo -n "Starting required services.. "

declare -a on=(dkms_autoinstaller network)
for service in "${on[@]}"
do
    eche Enabled $service.
    chkconfig $service on >&2
done
declare -a on=(iptables ntpd rsyslog smb sshd)
for service in "${on[@]}"
do
    eche Enabled $service.
    systemctl enable $service.service >&2
done

echo Done!

#### Reset MySQL ####

echo -n "Resetting John Harvard's password for MySQL to \"crimson\".. "
eche "Resetting John Harvard's password for MySQL to \"crimson\"."
systemctl stop mysqld.service >&2
mv /etc/my.cnf /etc/.my.cnf
cp -a /etc/.my.cnf /etc/my.cnf
cat > /etc/my.cnf <<"EOF"
[mysqld]
datadir=/var/lib/mysql
skip-grant-tables
skip-networking
socket=/var/lib/mysql/mysql.sock
user=mysql
EOF
systemctl start mysqld.service >&2
mysql --force --user=root >&2 <<"EOF"
DELETE FROM mysql.user WHERE User = '';
DELETE FROM mysql.user WHERE User = 'root';
DELETE FROM mysql.user WHERE User = 'jharvard';
INSERT INTO mysql.user (Host, User, Password, Grant_priv, Super_priv) VALUES('localhost', 'jharvard', PASSWORD('crimson'), 'Y', 'Y');
FLUSH PRIVILEGES;
GRANT ALL ON *.* TO 'jharvard'@'localhost';
EOF
systemctl stop mysqld.service >&2
mv /etc/.my.cnf /etc/my.cnf
systemctl start mysqld.service >&2

echo Done!

#### Fix permissions ####

echo -n "Fixing permissions.. "

eche "Adding groups"
groupadd -r courses >&2
groupadd students >&2

eche "Resetting John Harvard's password to \"crimson\"."
adduser --comment "John Harvard" --gid students --groups wheel jharvard >&2
echo crimson | passwd --stdin jharvard >&2

eche "Creating ~jharvard/Dropbox"
mkdir /home/jharvard/Dropbox >&2
chown jharvard:students /home/jharvard/Dropbox >&2
chmod 0700 /home/jharvard/Dropbox >&2

eche "Reset John Harvard's password for Samba to \"crimson\"; /var/lib/samba/private/passdb.tdb"
echo -e "crimson\ncrimson" | smbpasswd -a -s jharvard >&2

# ensure proper ownership
eche "Update ownership of John Harvard's home directory."
find /home/jharvard -path /home/jharvard/logs -prune -o -exec chown jharvard:students {} \; >&2

eche "Perms: /home/jharvard/logs"
mkdir /home/jharvard/logs >&2
chown root:root /home/jharvard/logs >&2
chmod 0755 /home/jharvard/logs >&2

eche "Perms: /home/jharvard/logs/httpd"
mkdir /home/jharvard/logs/httpd >&2
chown -R root:root /home/jharvard/logs/httpd >&2
chmod 0755 /home/jharvard/logs/httpd >&2
chmod 0644 /home/jharvard/logs/httpd/* >&2

eche "Perms: /home/jharvard/logs/mysqld"
mkdir /home/jharvard/logs/mysqld >&2
chown mysql:mysql /home/jharvard/logs/mysqld >&2
chmod 0755 /home/jharvard/logs/mysqld >&2
touch /home/jharvard/logs/mysqld/{localhost.err,localhost.log,localhost-slow.log} >&2
chown jharvard:mysql /home/jharvard/logs/mysqld/{localhost.err,localhost.log,localhost-slow.log} >&2
chmod 0660 /home/jharvard/logs/mysqld/{localhost.err,localhost.log,localhost-slow.log} >&2

eche "Perms: /home/jharvard/public_html"
mkdir /home/jharvard/public_html >&2
chown jharvard:students /home/jharvard/public_html >&2
chmod 0711 /home/jharvard >&2
chmod 0711 /home/jharvard/public_html >&2

eche "Perms: /home/jharvard/vhosts/localhost/html"
mkdir -p /home/jharvard/vhosts/localhost/html >&2
chown jharvard:students /home/jharvard/vhosts >&2
chmod 0711 /home/jharvard/vhosts >&2
chown jharvard:students /home/jharvard/vhosts/localhost >&2
chmod 0711 /home/jharvard/vhosts/localhost >&2
chown jharvard:students /home/jharvard/vhosts/localhost/html >&2
chmod 0711 /home/jharvard/vhosts/localhost/html >&2

eche "Perms: /home/jharvard/.ssh"
chmod 0600 /home/jharvard/.ssh/{authorized_keys,config,known_hosts} >&2

eche "Perms: /etc/sudoers.d/appliance50"
chmod 0440 /etc/sudoers.d/appliance50 >&2

eche "Perms: /etc/ssh"
chmod 0600 /etc/ssh/* >&2
chmod 0645 /etc/ssh/*.pub >&2

echo Done!

#### Restart services ####

echo -n "Restarting services.. "
declare -a restart=(httpd iptables network smb sshd)
for service in "${restart[@]}"
do
    eche Restarting $service.
    systemctl reload-or-try-restart $service.service >&2
done

echo Done!

#### Finish ####

echo -n "Final steps.. "

eche Redraw panel
find /home/jharvard/.config/xfce4/panel -type f -exec touch {} \; >&2

eche Import keys 
# (to avoid warnings during future software updates)
rpm --import /etc/pki/rpm-gpg/rpm-public-key.asc >&2
rpm --import /etc/pki/rpm-gpg/linux_signing_key.pub >&2
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-i386 >&2

eche SMB Password reset
echo -e "crimson\ncrimson" | smbpasswd -a -s jharvard >&2

eche Install FreeNX
# rm avoids REMOTE HOST IDENTIFICATION HAS CHANGED
rm -f /root/.ssh/known_hosts >&2
nxsetup --install --setup-nomachine-key >&2

eche Rebuild mlocate.db
/etc/cron.daily/mlocate.cron >&2

echo Done!
eche Done! 

# remove the downloaded updater
rm $0
